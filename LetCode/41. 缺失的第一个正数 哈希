class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        /*思路：因为根据题意，答案只能是在1到n+1，因为若是数组中所有整数按顺序出现，则答案为n + 1
        若中间有整数没有出现则范围在1-n之中，即数组的长度。
          所以，我们可以把原数组当做hash表，将所有的整数都放在它们理论上应该出现的位置，即数组中所有整数按顺序出现时（默认升序）的位置。
          而后对所有位置进行判断一旦发现最小的不符合要求的位置出现，即是答案。
          判断的方式有两种1.标记扫描。2.直接坚持当前位置存放的是不发预估值
        */
        int n = nums.size();
        for(int i = 0; i < n; i ++){
            while(nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i]){
                //为什么要有while因为交换过后新的nums也可能满足要求，而最后一个条件就是为了避免死循环
                swap(nums[nums[i] - 1], nums[i]);//将当前值放置在预估理想位置,下标从0开始
            }
        }

        for(int i = 0; i < n; i ++){
            if(nums[i] != i + 1){
                return i + 1;//不在理论位置
            }
        }

        return n + 1;//数组中所有整数按顺序出现。
    }
};
