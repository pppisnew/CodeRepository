class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<Character> rcd = new HashSet<>();
        int n = s.length(), ans = 0;

        int idx = -1;// 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动
        for(int i = 0; i < n; i++){
            if(i != 0){
                //更新起始地址
                rcd.remove(s.charAt(i - 1));
            }
            while(idx + 1< n && !rcd.contains(s.charAt(idx + 1))){
                //先对idx + 1进行判断再对idx进行+1操作，避免边界溢出异常
                rcd.add(s.charAt(idx + 1));
                ++ idx;
            }

            ans = Math.max(idx - i + 1, ans);//对每次取得的最长值进行判断
        }

        return ans;
    }
}
